---
layout: post
title: html、css、js加载顺序问题，以及资源的加载顺序
category: 技术
keywords: 技术,html、css、js加载
---

## 不包含js的html加载

当我们的页面只包含css、html和图片的时候，浏览器允许css和html还有图片并行加载，即使图片或者css还没有加载完成，
html也可以提前加载完成，只要等图片或者css加载完成后，根据对应的id、css 或者url 来放到对应的DOM结点位置上就可以。

也就是说，css 图片的加载不需要一棵稳定的DOM树

## 包含js的html加载

但是如果页面中存在js，那么在加载js的过程中，浏览器不会允许css 图片 和 html 并行加载，也就是说，加载js是同步的。

原因是,js可以改变结点结构，如果，先让图片 和 css 加载完成后， js中的代码改变了html的结构，浏览器就不知道将加载好的图片或css丢到那个结点了，

所以，加载js的时候浏览器不允许其他资源进行加载，html要么在js前面加载，要么在js加载完后加载，

但是，js十分庞大的时候，html没加载的话，会导致页面有一段空白期，用户可能看到白页以为网速慢，就没有耐心在等下去了

这也就是为什么js的script标签需要放到html的后面的原因

## 资源加载都做了哪些步骤？

1. 浏览器对需要加载的资源进行分类
2. 浏览器对需要确定 加载的资源 content-security-policy 策略, 如果加载的资源不属于 信任白名单内或者不是https 请求，会提示报错（mixed content）甚至不加载这些资源
3. 对加载资源的优先级进行计算，并调整资源的加载优先级，
  3.1 html、css、font 的优先级最高(为了降低白屏时间过长)，其次是preload 预加载资源，然后才是图片、视频、音频，最后是prefetch预读取的资源
  3.2 例如一些不属于当前可视区范围内的图片、视频、音频会降低其优先级顺序
  3.3 对于同步的 xhr 请求调高其优先级
  3.4 对于script 资源会根据script 资源的位置和属性标签分为三类
    3.4.1 script 标签中设置了 defer/async 属性的标签不会优先加载，因为它们都不会阻塞页面的渲染
    3.4.2 script 标签啥都没设置的那种，看script标签的位置决定：script标签丢到 head 区域的优先加载并可能阻塞页面加载速度，在body后面的优先级会降低
4. 根据上述计算的优先级，分别对资源进行加载